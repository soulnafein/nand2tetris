// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    DMux(in=true, sel=instruction[15], a=aInstruction, b=cInstruction);
    Or(a=aluToA, b=aInstruction, out=loadA);
    Mux16(a=aluOut, b[0..14]=instruction[0..14], sel=aInstruction, out=valueForA);
    ARegister(in=valueForA, load=loadA, out=aIntoMux, out[0..14]=addressM);
    DRegister(in=aluOut, load=aluToD, out=dOut);
    And(a=cInstruction, b=instruction[12], out=ca);
    And(a=cInstruction, b=instruction[11], out=c1);
    And(a=cInstruction, b=instruction[10], out=c2);
    And(a=cInstruction, b=instruction[9], out=c3);
    And(a=cInstruction, b=instruction[8], out=c4);
    And(a=cInstruction, b=instruction[7], out=c5);
    And(a=cInstruction, b=instruction[6], out=c6);
    And(a=cInstruction, b=instruction[5], out=aluToA);
    And(a=cInstruction, b=instruction[4], out=aluToD);
    And(a=cInstruction, b=instruction[3], out=writeM);
    And(a=cInstruction, b=instruction[2], out=j1);
    And(a=cInstruction, b=instruction[1], out=j2);
    And(a=cInstruction, b=instruction[0], out=j3);

    Mux16(a=aIntoMux, b=inM, sel=ca, out=mOrAOut);
    ALU(y=mOrAOut, x=dOut, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=aluOut, out=outM, zr=zr, ng=ng);

    And(a=j1, b=ng, out=j1AndNg);
    And(a=j2, b=zr, out=j2AndZr);
    Not(in=ng, out=notNg);
    Not(in=zr, out=notZr);
    And(a=notNg, b=notZr, out=gt);
    And(a=j3, b=gt, out=j3AndGt);

    Or(a=j1AndNg, b=j2AndZr, out=firstPartShouldJump);
    Or(a=firstPartShouldJump, b=j3AndGt, out=shouldJump);
    Not(in=shouldJump, out=shouldIncrease);


    PC(in=aIntoMux, load=shouldJump, inc=shouldIncrease, reset=reset, out[0..14]=pc);


}
